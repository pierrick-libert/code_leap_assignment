{
  "openapi": "3.0.0",
  "info": {
    "title": "Code Leap Assignment",
    "description": "API requested for Code Leap Assignment",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:8080",
      "description": "Main production server"
    }
  ],
  "paths": {
    "/api/breeds": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/GetBreedPageParams"
          },
          {
            "$ref": "#/components/parameters/GetBreedLimitParams"
          },
          {
            "$ref": "#/components/parameters/GetBreedOrderParams"
          }
        ],
        "tags": [
          "Breed"
        ],
        "summary": "GET Breeds",
        "description": "Get all breeds in DB woth the possibility to filter them",
        "responses": {
          "200": {
            "description": "A JSON object with data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Breed"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/breeds/{name}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/DefaultNamePath"
        }
      ],
      "get": {
        "tags": [
          "Breed"
        ],
        "summary": "GET Breed By Name",
        "description": "Get all breeds in DB woth the possibility to filter them",
        "responses": {
          "200": {
            "description": "A JSON object with data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Breed"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/images": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "POST Image",
        "description": "Create an image with the possibility to link it to a breed",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostImage"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/GenericCreate"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/images/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/DefaultIDPath"
        }
      ],
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "GET Image By ID",
        "description": "Get a specific image based on its ID",
        "responses": {
          "200": {
            "description": "A JSON object with data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Image"
        ],
        "summary": "DELETE Image By ID",
        "description": "Delete a specific image based on its ID",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GenericSucces"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/images/random": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/GetImageNbParams"
          }
        ],
        "tags": [
          "Image"
        ],
        "summary": "GET Image By ID",
        "description": "Get a specific image based on its ID",
        "responses": {
          "200": {
            "description": "A JSON object with data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Image"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/api/images/display/{name}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/DefaultNamePath"
        }
      ],
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "GET Display Image",
        "description": "Display the image based on its name",
        "responses": {
          "200": {
            "description": "Return and display the image if it exists"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Breed"
    },
    {
      "name": "Image"
    }
  ],
  "components": {
    "responses": {
      "GenericSucces": {
        "description": "A message saying everything went well",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BodyGeneral"
            }
          }
        }
      },
      "GenericCreate": {
        "description": "A message saying everything went well and the id of the resource created",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BodyGeneral"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "format": "string"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "BadRequest": {
        "description": "A message with the details of the bad parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BodyGeneral"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "A message requesting a JWT token",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BodyGeneral"
            }
          }
        }
      },
      "NotFound": {
        "description": "A message with the details of the item(s) not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BodyGeneral"
            }
          }
        }
      },
      "Duplicated": {
        "description": "A message describing the duplicated item in DB",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BodyGeneral"
            }
          }
        }
      },
      "InternalError": {
        "description": "A message with a generic message",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BodyGeneral"
            }
          }
        }
      }
    },
    "parameters": {
      "DefaultNamePath": {
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Name of the resource to manipulate"
      },
      "DefaultIDPath": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "ID of the resource to manipulate"
      },
      "GetBreedPageParams": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "number"
        },
        "required": false,
        "description": "Filter the number of breeds returned"
      },
      "GetBreedLimitParams": {
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "number"
        },
        "required": false,
        "description": "Filter the number of breeds returned"
      },
      "GetBreedOrderParams": {
        "in": "query",
        "name": "order",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "Define the order of breeds returned"
      },
      "GetImageNbParams": {
        "in": "query",
        "name": "order",
        "schema": {
          "type": "number"
        },
        "required": false,
        "description": "Restrict the number of random images returned"
      }
    },
    "schemas": {
      "BodyGeneral": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Breed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "height": {
            "type": "number"
          },
          "width": {
            "type": "number"
          },
          "filename": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "requestBodies": {
      "PostImage": {
        "required": true,
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "breed_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "file": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "required": [
                "file"
              ]
            }
          }
        }
      }
    }
  }
}